@page "/Livre/ajout-livres"
@using CommonLib.GestBibliotheque.Utilitaires
@using GestBibliotheque.Blazor.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<h3 class="mb-3">Ajouter un nouveau livre</h3>

@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert @(Success ? "alert-success" : "alert-danger")">@Message</div>
}

<EditForm Model="@livre" OnValidSubmit="AjouterLivre">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="titre" class="form-label">Titre</label>
        <InputText id="titre" @bind-Value="livre.Titre" class="form-control" />
    </div>

    <div class="mb-3">
        <label for="auteur" class="form-label">Auteur</label>
        <InputText id="auteur" @bind-Value="livre.Auteur" class="form-control" />
    </div>
    <div class="mb-3">
        <label for="stock" class="form-label">Stock</label>
        <InputNumber id="stock" @bind-Value="livre.Stock" class="form-control" />
    </div>
    <div class="mb-3">
        <label for="categorie" class="form-label">Catégorie</label>
        <InputSelect id="categorie" @bind-Value="livre.CategorieId" class="form-control" required>
            <option value="">-- Sélectionner une catégorie --</option>
            @foreach (var cat in categories)
            {
                <option value="@cat.Id">@cat.Libelle</option>
            }
        </InputSelect>
        @if (livre.CategorieId == Guid.Empty)
        {
            <span class="text-danger">Veuillez sélectionner une catégorie valide.</span>
        }
    </div>

    <button type="submit" class="btn btn-success">Ajouter</button>
    <button type="button" class="btn btn-secondary" @onclick="RetourListe">Annuler</button>
</EditForm>

@code {
    private LivreDto livre = new();
    private string? Message;
    private bool Success;

    private List<CategorieDto> categories = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            categories = await Http.GetFromJsonAsync<List<CategorieDto>>("/api-bibliotheque/categorie") ?? new();
        }
        catch (Exception ex)
        {
            Message = GestionErreurs.GererErreur(ex);
            Success = false;
        }
    }

    private async Task AjouterLivre()
    {
        if (livre.CategorieId == Guid.Empty)
        {
            Message = "Veuillez sélectionner une catégorie avant d'ajouter un livre.";
            Success = false;
            return;
        }

        try
        {
            var response = await Http.PostAsJsonAsync("/api-bibliotheque/livre/ajouter", livre);
            if (response.IsSuccessStatusCode)
            {
                Success = true;
                Message = "Livre ajouté avec succès !";
                RetourListe();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Success = false;
                Message = errorContent;
            }
        }
        catch (Exception ex)
        {
            Success = false;
            Message = GestionErreurs.GererErreur(ex);
        }
    }

    private void RetourListe()
    {
        Navigation.NavigateTo("Livre/Livres");
    }
}