@page "/modifier-livres/{id:guid}"
@using CommonLib.GestBibliotheque.Utilitaires
@using GestBibliotheque.Blazor.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<h3 class="mb-3">Modifier le Livre</h3>

@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert @(Success ? "alert-success" : "alert-danger")">@Message</div>
}

@if (livre == null)
{
    <LoadingSpinner />
}
else
{
    <EditForm Model="@livre" OnValidSubmit="ModifierLivre">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="titre" class="form-label">Titre</label>
            <InputText id="titre" @bind-Value="livre.Titre" class="form-control" />
        </div>

        <div class="mb-3">
            <label for="auteur" class="form-label">Auteur</label>
            <InputText id="auteur" @bind-Value="livre.Auteur" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="stock" class="form-label">Stock</label>
            <InputNumber id="stock" @bind-Value="livre.Stock" class="form-control" />
        </div>

        <div class="mb-3">
            <label for="categorie" class="form-label">Catégorie</label>
            <InputSelect id="categorie" @bind-Value="livre.CategorieId" class="form-control">
                <option value="">-- Sélectionner une catégorie --</option>
                @foreach (var cat in categories)
                {
                    <option value="@cat.Id">@cat.Libelle</option>
                }
            </InputSelect>
            @if (livre.CategorieId == Guid.Empty)
            {
                <span class="text-danger">Veuillez sélectionner une catégorie valide.</span>
            }
        </div>

       
        <button type="submit" class="btn btn-primary">Enregistrer</button>
        <button type="button" class="btn btn-secondary" @onclick="Annuler">Annuler</button>
    </EditForm>
}

@code {
    [Parameter]
    public Guid id { get; set; } 

    private LivreDto? livre = null;
    private string? Message;
    private bool Success;

    private List<CategorieDto> categories = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            categories = await Http.GetFromJsonAsync<List<CategorieDto>>("/api-bibliotheque/categorie") ?? new();

            livre = await Http.GetFromJsonAsync<LivreDto>($"/api-bibliotheque/livre/{id}");
            if (livre == null)
            {
                Message = "Erreur : Le livre demandé est introuvable.";
                Success = false;
            }
        }
        catch (Exception ex)
        {
            Message = GestionErreurs.GererErreur(ex);
            Success = false;
        }
    }

    private async Task ModifierLivre()
    {
        if (livre?.CategorieId == Guid.Empty)
        {
            Message = "Veuillez sélectionner une catégorie avant d'enregistrer.";
            Success = false;
            return;
        }

        try
        {
            var response = await Http.PutAsJsonAsync($"/api-bibliotheque/livre/modifier/{id}", livre);
            if (response.IsSuccessStatusCode)
            {
                Success = true;
                Message = "Livre mis à jour avec succès !";
                await Task.Delay(1000);
                Navigation.NavigateTo("Livre/Livres");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Success = false;
                Message = $"Échec de la mise à jour : {errorContent}";
            }
        }
        catch (Exception ex)
        {
            Success = false;
            Message = GestionErreurs.GererErreur(ex);
        }
    }

    private void Annuler()
    {
        Navigation.NavigateTo("Livre/Livres");
    }
}