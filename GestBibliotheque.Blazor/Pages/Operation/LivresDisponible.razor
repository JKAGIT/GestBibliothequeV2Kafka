@page "/Operation/LivresDisponible"
@inject HttpClient Http
@using GestBibliotheque.Blazor.Models
@using CommonLib.GestBibliotheque.Utilitaires

<h3 class="mb-3">Liste des livres disponibles</h3>

@if (isLoading)
{
    <LoadingSpinner />
}
else
{
    <div class="mb-3">
        <input id="searchLivre" @bind="searchTerm" @bind:event="oninput" class="form-control" placeholder="Rechercher par titre ou auteur..." />
    </div>

    @if (!string.IsNullOrEmpty(Message))
    {
        <div class="alert @(Success ? "alert-success" : "alert-danger")">@Message</div>
    }

    @if (!pagedLivresDisponibles.Any() && rechercheEffectuee)
    {
        <p class="alert alert-info">Aucun livre disponible ne correspond à la recherche.</p>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Titre</th>
                        <th>Auteur</th>
                        <th>Catégorie</th>
                        <th>Stock</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var livre in pagedLivresDisponibles)
                    {
                        <tr>
                            <td>@livre.Titre</td>
                            <td>@livre.Auteur</td>
                            <td>@livre.Libelle</td>
                            <td>@livre.Stock</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <Pagination CurrentPage="currentPage" TotalPages="totalPages" OnPageChanged="HandlePageChange" />
    }
}

@code {
    private List<LivreDto>? livresDisponibles;
    private List<LivreDto> pagedLivresDisponibles = new();
    private string searchTerm = string.Empty;

    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => (int)Math.Ceiling(filteredLivres.Count / (double)pageSize);

    private string? Message;
    private bool Success;
    private bool isLoading = true;
    private bool rechercheEffectuee = false;

    private List<LivreDto> filteredLivres => string.IsNullOrWhiteSpace(searchTerm)
        ? livresDisponibles ?? new List<LivreDto>()
        : livresDisponibles!.Where(l =>
            l.Titre.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            l.Auteur.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            livresDisponibles = await Http.GetFromJsonAsync<List<LivreDto>>("/api-bibliotheque/operation/disponible");
            UpdatePagedLivres();
        }
        catch (Exception ex)
        {
            Message = GestionErreurs.GererErreur(ex);
            Success = false;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void UpdatePagedLivres()
    {
        if (filteredLivres.Any())
        {
            pagedLivresDisponibles = filteredLivres
                .Skip((currentPage - 1) * pageSize)
                .Take(pageSize)
                .ToList();
        }
        else
        {
            pagedLivresDisponibles = new List<LivreDto>();
        }
    }

    private void HandlePageChange(int page)
    {
        currentPage = page;
        UpdatePagedLivres();
    }

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        currentPage = 1;
        rechercheEffectuee = true;
        Message = null;
        Success = false;
        UpdatePagedLivres();
    }
}
