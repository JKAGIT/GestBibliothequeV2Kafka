@page "/Emprunt/Modifier-Emprunts/{id:guid}"
@using CommonLib.GestBibliotheque.Utilitaires
@using GestBibliotheque.Blazor.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<h3 class="mb-3">Modifier l'emprunt</h3>

@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert @(Success ? "alert-success" : "alert-danger")">@Message</div>
}

@if (emprunt == null)
{
    <LoadingSpinner />
}
else
{
    <EditForm Model="@emprunt" OnValidSubmit="ModifierEmprunt">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="usagerSelect" class="form-label">Sélectionner un usager</label>
            <InputSelect id="usagerSelect" class="form-select" @bind-Value="selectedUsagerString">
                <option value="">-- Sélectionner un usager --</option>
                @foreach (var user in usagers)
                {
                    <option value="@user.Id.ToString()">@($"{user.Nom} {user.Prenoms}")</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label for="livreSelect" class="form-label">Sélectionner un livre</label>
            <InputSelect id="livreSelect" class="form-select" @bind-Value="selectedLivreString">
                <option value="">-- Sélectionner un livre --</option>
                @foreach (var livre in livres)
                {
                    <option value="@livre.Id.ToString()">@livre.Titre</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label for="dateDebut" class="form-label">Date d'emprunt</label>
            <InputDate id="dateDebut" @bind-Value="emprunt.DateDebut" class="form-control" />
        </div>

        <div class="mb-3">
            <label for="dateRetourPrevue" class="form-label">Date de retour prévue</label>
            <InputDate id="dateRetourPrevue" @bind-Value="emprunt.DateRetourPrevue" class="form-control" />
        </div>

        <button type="submit" class="btn btn-primary">Enregistrer</button>
        <button type="button" class="btn btn-secondary" @onclick="Annuler">Annuler</button>
    </EditForm>
}

@code {
    [Parameter]
    public Guid id { get; set; }

    private EmpruntDto? emprunt;
    private string? Message;
    private bool Success;

    private List<UsagerDto> usagers = new();
    private List<LivreDto> livres = new();

    private string selectedUsagerString
    {
        get => emprunt?.IDUsager.ToString() ?? "";
        set
        {
            if (emprunt != null && Guid.TryParse(value, out var guid))
            {
                emprunt.IDUsager = guid;
            }
        }
    }

    private string selectedLivreString
    {
        get => emprunt?.IDLivre.ToString() ?? "";
        set
        {
            if (emprunt != null && Guid.TryParse(value, out var guid))
            {
                emprunt.IDLivre = guid;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await ChargerUsagers();
        await ChargerLivres();

        try
        {
            emprunt = await Http.GetFromJsonAsync<EmpruntDto>($"/api-bibliotheque/emprunts/empruntParId/{id}");
            if (emprunt == null)
            {
                Message = "Erreur : L'emprunt demandé est introuvable.";
                Success = false;
            }
            else
            {
                Success = true;
            }
        }
        catch (Exception ex)
        {
            Message = GestionErreurs.GererErreur(ex);
            Success = false;
        }
    }

    private async Task ChargerUsagers()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<List<UsagerDto>>("/api-bibliotheque/usagers");
            usagers = result ?? new List<UsagerDto>();
        }
        catch (Exception ex)
        {
            Message = GestionErreurs.GererErreur(ex);
            Success = false;
        }
    }

    private async Task ChargerLivres()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<List<LivreDto>>("/api-bibliotheque/livre");
            livres = result?.Where(l => l.Stock > 0).ToList() ?? new List<LivreDto>();
        }
        catch (Exception ex)
        {
            Message = GestionErreurs.GererErreur(ex);
            Success = false;
        }
    }

    private async Task ModifierEmprunt()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"/api-bibliotheque/emprunts/modifier/{id}", emprunt);
            if (response.IsSuccessStatusCode)
            {
                Success = true;
                Message = "Emprunt mis à jour avec succès!";
                await Task.Delay(2000);
                Navigation.NavigateTo("/Emprunt/emprunts");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Success = false;
                Message = $"Échec de la mise à jour : {errorContent}";
            }
        }
        catch (Exception ex)
        {
            Success = false;
            Message = GestionErreurs.GererErreur(ex);
        }
    }

    private void Annuler()
    {
        Navigation.NavigateTo("/Emprunt/emprunts");
    }
}