@page "/modifier-usagers/{id:guid}"
@using CommonLib.GestBibliotheque.Utilitaires
@using GestBibliotheque.Blazor.Models
@inject HttpClient Http
@inject NavigationManager Navigation


<h3 class="mb-3">Modifier l'usager</h3>

@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert @(Success ? "alert-success" : "alert-danger")">@Message</div>
}

@if (usager == null)
{
    <p class="alert alert-warning">Chargement des données de l'usager...</p>
}
else
{
    <EditForm Model="@usager" OnValidSubmit="ModifierUsager">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="nom" class="form-label">Nom</label>
            <InputText id="nom" @bind-Value="usager.Nom" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="nom" class="form-label">Prénoms</label>
            <InputText id="nom" @bind-Value="usager.Prenoms" class="form-control" />
        </div>

        <div class="mb-3">
            <label for="email" class="form-label">Courriel</label>
            <InputText id="email" @bind-Value="usager.Courriel" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="telephone" class="form-label">Téléphone</label>
            <InputText id="telephone" @bind-Value="usager.Telephone" class="form-control" />
        </div>

        <button type="submit" class="btn btn-primary">Enregistrer</button>
        <button type="button" class="btn btn-secondary" @onclick="Annuler">Annuler</button>
    </EditForm>
}

@code {
    [Parameter]
    public Guid id { get; set; }

    private UsagerDto? usager = null;
    private string? Message;
    private bool Success;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            usager = await Http.GetFromJsonAsync<UsagerDto>($"/api-bibliotheque/usagers/usagerParId/{id}");
        }
        catch (HttpRequestException httpEx)
        {
            Message = $"Erreur de chargement : {httpEx.Message}";
            Success = false;
        }
        catch (Exception ex)
        {
            Message = GestionErreurs.GererErreur(ex);
            Success = false;
        }
    }

    private async Task ModifierUsager()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"/api-bibliotheque/usagers/modifier/{id}", usager);
            if (response.IsSuccessStatusCode)
            {
                Success = true;
                Message = "Usager mis à jour avec succès !";
                await Task.Delay(1000);
                Navigation.NavigateTo("/usagers");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Success = false;
                Message = $"Échec de la mise à jour : {errorContent}";
            }
        }
        catch (Exception ex)
        {
            Success = false;
            Message = GestionErreurs.GererErreur(ex);
        }
    }

    private void Annuler()
    {
        Navigation.NavigateTo("/usagers");
    }
}